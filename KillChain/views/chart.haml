.span10
  .row
    %input#newAsset{ :type => "text" }
    %br
    %button#btnAddAsset Add Asset

    %br
    %br

    %select#newAttack
      - @findings.each do |item|
        %option #{item['title']}
    %br
    %button#btnAddThreatVector Add Threat Vector

  .mermaid#svg

  %form#formSVG{ :method => "POST" }
    %input#svgText{ :name => "svgText", :type => "hidden" }

    %br
    %input{ :type => "hidden", :name => "report_id", :value => "#{@report_id}" }
    %input#graphElements{ :type => "hidden", :name => "graphElements" }
    %input#relationships{ :type => "hidden", :name => "relationships" }
    %input.btn.btn-default#btnSubmit{ :type => "submit", :value => "Save" }
    %a.btn.btn-default{ :href => "/" }
      Cancel

%script{ :src => "KillChain/public/mermaid.min.js" }
%script{ :src => "KillChain/public/canvg.min.js" }

:css
  .mermaid .label text {
    fill: #333;
  }

  #svg g.highlightMermaid > rect,
  #svg g.highlightMermaid > circle {
    stroke: #9ecaed;
    stroke-width: 5px !important;
    stroke-opacity: 0.6;
  }

:javascript

  var clickedItem;

  var classDefsStart = "graph LR";

  var classDefs = #{@classDefs.to_json};
  var graphElements = #{@graphElements.to_json};
  var relationships = #{@relationships.to_json} || [];

  var elementCounter = graphElements.length;
  var refreshCounter = 1;

  var config = {
    startOnLoad:false,
    flowchart:{
        useMaxWidth:false,
        htmlLabels:false
    }
  };
  mermaid.initialize(config);
  refreshMermaid(makeGraph());

  $("#formSVG").on("submit", updateSVG);
  $("#btnAddAsset").on("click", addAsset);
  $("#btnAddThreatVector").on("click", addThreatVector);

  $(document).keyup(function(e) {
       if (e.keyCode == 27) { // escape key maps to keycode `27`
          clickedItem = null;
          $(".highlightMermaid").removeClass("highlightMermaid");
      }
  });

  function makeCSSInline() {
    var stylesheets = document.styleSheets;
    for (var index = 0; index < stylesheets.length; index++) {
      var sheet = stylesheets[index];
      if (sheet.cssRules.length <= 0 || !sheet.cssRules[0].selectorText
           || (!sheet.cssRules[0].selectorText.startsWith(".mermaid") && !sheet.cssRules[0].selectorText.startsWith("#mermaid")))
        continue;

      var rules = sheet.cssRules;
      for (var ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {
        $(rules[ruleIndex].selectorText).each(function(num, elem) {
          elem = $(elem);
          if (elem.attr("style")) {
            elem.attr("style", elem.attr("style") + ";" + rules[ruleIndex].style.cssText);
          } else {
            elem.attr("style", rules[ruleIndex].style.cssText);
          }
        });
      }
    }
  }

  function updateSVG() {
    makeCSSInline();
    var serializer = new XMLSerializer();
    var svgString = serializer.serializeToString(document.querySelector("svg"));
    $("#svgText").val(svgString);

    $("#graphElements").val(JSON.stringify(graphElements));
    $("#relationships").val(JSON.stringify(relationships));

    return true;
  }

  function addThreatVector() {
    elementCounter = elementCounter+1;
    addElement("id" + elementCounter, "attack", $("#newAttack").val());
  }

  function addAsset() {
    elementCounter = elementCounter+1;
    addElement("id" + elementCounter, "asset", $("#newAsset").val());
  }

  function addElement(id, className, val) {
    var newElement = {
      "key_name": id,
      "name": val,
      "class_id": findClassDefByName(className).id
    };
    graphElements.push(newElement);
    refreshMermaid(makeGraph());
  }

  function linkElements() {
    if (clickedItem) {
      var firstItem = findElementByKeyName($(clickedItem).attr("id"));
      var secondItem = findElementByKeyName($(this).attr("id"));

      var relationshipIndex = getRelationshipIndex(firstItem.key_name, secondItem.key_name);

      // The link was already there. Lets undo it
      if (relationshipIndex != -1) {
        relationships.splice(relationshipIndex,1);
      } else {
        var newRelationship = {
          "from_key": firstItem.key_name,
          "to_key": secondItem.key_name
        };
        relationships.push(newRelationship);
      }

      refreshMermaid(makeGraph());

      clickedItem = null;
      $(this).removeClass("highlightMermaid");
    } else {
      clickedItem = this;
      $(this).addClass("highlightMermaid");
    }
  }

  function refreshMermaid(content) {
    mermaid.parse(content);
    var callback = function(html) {
        $('#svg').html(html);

        $('#svg').find('text').parents('g[id^="id"]').on("click", linkElements);
    };
    mermaid.render('mermaid' + refreshCounter, content, callback);
    refreshCounter = refreshCounter+1;
  }

  function makeGraph() {
    // Class definitions
    var classList = [];
    var graph = classDefsStart + "\n";

    for (var index = 0; index < classDefs.length; index++) {
      graph += "classDef " + classDefs[index].name + " " + classDefs[index].css + ";\n";
      classList.push(classDefs[index].name);
    }

    // Graph Elements
    if (graphElements.length > 0) {
      for (var index = 0; index < graphElements.length; index++) {
        var currentElement = graphElements[index];

        if (currentElement.is_start) {
          graph += currentElement.key_name + "((\"" + currentElement.name + "\"));\n";
        } else {
          graph += currentElement.key_name + "[\"" + currentElement.name + "\"];\n";
        }

        // Classes
        if (currentElement.class_id && currentElement.class_id >= 0) {
          var elementClass = findClassDefById(currentElement.class_id);
          graph += "class " + currentElement.key_name + " " + elementClass.name + ";\n";
        }
      }

      // RelationShips
      for (var relationshipIndex = 0; relationshipIndex < relationships.length; relationshipIndex++) {
        graph += relationships[relationshipIndex].from_key + " --> " + relationships[relationshipIndex].to_key + ";\n";
      }
    } else {
      // Fix for the fact that mermaid graphs doesn't support empty class section
      for (var index = 0; index < classList.length; index++) {
        graph += "class id0 " + classList[index] + ";\n";
      }
    }

    return graph;
  }

  function findClassDefById(id) {
    for (var index = 0; index < classDefs.length; index++) {
      if (classDefs[index].id === id) {
        return classDefs[index];
      }
    }

    return null;
  }

  function findClassDefByName(name) {
    for (var index = 0; index < classDefs.length; index++) {
      if (classDefs[index].name === name) {
        return classDefs[index];
      }
    }

    return null;
  }

  function findElementByKeyName(keyName) {
    for (var index = 0; index < graphElements.length; index++) {
      if (graphElements[index].key_name === keyName) {
        return graphElements[index];
      }
    }

    return null;
  }

  function getRelationshipIndex(fromKey, toKey) {
    for (var index = 0; index < relationships.length; index++) {
      if (relationships[index].from_key === fromKey
          && relationships[index].to_key === toKey) {
        return index;
      }
    }

    return -1;
  }
